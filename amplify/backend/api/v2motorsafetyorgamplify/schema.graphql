type ContactUs
@model(timestamps: null)
@key(fields: ["id", "createdAt"])
@auth(rules: [{ allow: public, provider: iam, operations: [read, update] }])
{
  id: String!
  createdAt: AWSDateTime!
  department: String
  email: String
  message: String
  name: String
}

type Dealer
@model(timestamps: null)
@key(fields: ["id"])
@searchable
@auth(rules: [{ allow: public, provider: iam, operations: [read, update] }])
{
  address: String
  location: String
  brand: String
  city: String
  city_slug: String
  city_state_slug: String
  crm_id: Int
  google_place_id: String
  google_place_url: String
  id: Int!
  is_trusted: String
  latitude: Float
  longitude: Float
  name: String
  phone_number_main: String
  phone_number_service: String
  service_hours: String
  slug: String
  state: String
  state_slug: String
  utc_offset: Int
  website: String
  zip: Int
}

type DealerConnection @aws_iam {
  items: [Dealer]
  total: Int
  nextToken: String
}

type Model
@model(timestamps: null)
@key(fields: ["make", "year"])
@auth(rules: [{ allow: public, provider: iam, operations: [read, update] }])
{
  make: String!
  models: [String]
  year: Int!
}

type MyGarageItem {
  createdAt: AWSDateTime
  make: String
  model: String
  vin: String
  year: String
}

type MyGarage
@model(timestamps: null)
@key(fields: ["username"])
@auth(rules: [{ allow: public, provider: iam }])
{
  data: [MyGarageItem]
  username: String!
}

type DealerClaimRequest
@model(timestamps: null)
@key(fields: ["id"])
@searchable
@auth(rules: [{ allow: public, provider: iam, operations: [read, update] }])
{
  address: String
  brand: String
  city: String
  city_slug: String
  city_state_slug: String
  created_at: AWSDateTime
  crm_id: Int
  dealer_id: String!
  email: String!
  google_place_id: String
  google_place_url: String
  id: String!
  is_trusted: String
  latitude: Float
  longitude: Float
  name: String
  phone_number_main: String
  phone_number_service: String
  service_hours: String
  slug: String
  state: String
  state_slug: String
  status: Int
  utc_offset: Int
  website: String
  zip: Int
}

type Appointment
@model(timestamps: null)
@key(fields: ["id"])
@auth(rules: [{ allow: public, provider: iam, operations: [read, update] }])
{
  createdAt: AWSDateTime
  dealer_id: String
  dealership: String
  email: String
  id: String!
  make: String
  message: String
  model: String
  name: String
  phone_number: String
  vin: String
  year: String
  zip: String
}

type SubscribeItem
@aws_iam
{
  createdAt: AWSDateTime
  make: String
  model: String
  type: String
  vin: String
  year: String
}

type Subscribe
@model(timestamps: null)
@key(fields: ["email"])
@auth(rules: [{ allow: public, provider: iam }])
{
  data: [SubscribeItem]
  email: String!
}

type VinRecallResult
{
  api_request_id: String
  customer: VinCustommer
  error_description: String
  id: Int
  internal_record_id: String
  last_updated: String
  make: String
  model_name: String
  model_year: String
  recall_count: Int
  recalls: [VinRecall]
  status: String
  use_type: String
  user: Int
  user_description: String
  vin: String
}

type VinCustommer
@aws_iam
{
  address: String
  city: String
  customer: String
  email: String
  first_name: String
  last_name: String
  locator: String
  phone: String
  state: String
  zipcode: String
  zipcode_extra: String
}

type VinRecall
@aws_iam
{
  are_parts_available: Boolean
  campaign_type: String
  child: AWSJSON
  description: String
  dont_drive: Boolean
  effective_date: String
  expiration_date: Float
  forbidden_reason: String
  government_id: String
  is_forbidden: Boolean
  is_preinspection_required: Boolean
  is_remedy_available: Boolean
  is_reviewed: Boolean
  labor_difficulty: Int
  labor_max: String
  labor_min: String
  name: String
  nhtsa_id: String
  oem_id: String
  overall_rank: Int
  parts_available_date: Float
  profit_rank: Int
  recall_age: Int
  recall_id: Int
  recall_last_updated: String
  remedy: String
  risk: String
  risk_rank: Int
  risk_type: String
  stop_sale: Boolean
}

type NhtsaRecallConnection
{
  Count: Int
  Message: String
  Results: [NhtsaRecall]
}

type NhtsaRecall
{
  Component: String
  Conequence: String
  Make: String
  Manufacturer: String
  Model: String
  ModelYear: String
  NHTSACampaignNumber: String
  Notes: String
  Remedy: String
  ReportReceivedDate: String
  Summary: String
}

input NhtsaRecallInput {
  make: String!
  model: String!
  year: String!
}

input CreateAppointmentInput {
  createdAt: Float
  dealer_id: String
  dealership: String
  email: String
  id: String!
  make: String
  message: String
  model: String
  name: String
  phone_number: String
  vin: String
  year: String
  zip: String
}

type V2FlatRecall
@model(timestamps: null)
@key(fields: ["recall_id"])
@key(name: "recallsByType", fields: ["type"], queryField: "recallsByType")
@auth(rules: [{ allow: public, provider: iam, operations: [read, update] }])
{
  component: String
  conequence: String
  make: String
  manufacturer: String
  model: String
  model_year: String
  nhtsa_campaign_number: String
  notes: String
  remedy: String
  name: String
  recall_date: String
  recall_id: Int!
  summary: String
  type: String!
}

type V2FlatRecallCountByType
@model(timestamps: null)
@key(fields: ["type"])
@auth(rules: [{ allow: public, provider: iam }])
{
  count: Int!
  type: String!
}


type Query {
  listVinRecalls(vin: String!): VinRecallResult
    @auth(rules: [{ allow: public, provider: iam }])
    @function(name: "RecallMasterApiCall-${env}")

  listNhtsaRecalls(query: NhtsaRecallInput!): NhtsaRecallConnection
    @auth(rules: [{ allow: public, provider: iam }])
    @function(name: "GetNhtsaRecalls-${env}")

  searchByDistance(make: String!, zip: String!, mi: Int, location: String, nextToken: String, from: Int, limit: Int): DealerConnection
    @aws_iam
}

type Mutation {
  saveAppointment(input: CreateAppointmentInput!): Appointment
    @auth(rules: [{ allow: public, provider: iam}])
    @function(name: "SaveAppointment-${env}")
}
